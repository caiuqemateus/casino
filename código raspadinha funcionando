<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Raspadinha Virtual</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            background-color: #121212;
            color: white;
            text-align: center;
            padding: 20px;
        }
        
        .container {
            max-width: 500px;
            margin: 0 auto;
            background-color: #1e1e1e;
            border-radius: 10px;
            padding: 20px;
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.5);
        }
        
        h1 {
            color: #ffd700;
            margin-bottom: 20px;
        }
        
        .game-board {
            display: grid;
            grid-template-columns: repeat(3, 1fr);
            gap: 10px;
            margin-bottom: 20px;
        }
        
        .scratch-area {
            position: relative;
            height: 100px;
            background-color: #333;
            border-radius: 5px;
            cursor: pointer;
            overflow: hidden;
        }
        
        .scratch-cover {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, #707070, #505050);
            border-radius: 5px;
            display: flex;
            align-items: center;
            justify-content: center;
            color: #ddd;
            font-size: 14px;
        }
        
        .symbol {
            display: flex;
            align-items: center;
            justify-content: center;
            height: 100%;
            font-size: 40px;
        }
        
        .controls {
            margin-top: 20px;
        }
        
        button {
            background-color: #ffd700;
            color: #121212;
            border: none;
            padding: 10px 20px;
            border-radius: 5px;
            font-size: 16px;
            cursor: pointer;
            margin: 5px;
            transition: background-color 0.3s;
        }
        
        button:hover {
            background-color: #ffcc00;
        }
        
        button:disabled {
            background-color: #555;
            color: #999;
            cursor: not-allowed;
        }
        
        .message {
            margin-top: 20px;
            font-size: 18px;
            min-height: 30px;
        }
        
        .win {
            color: #00ff00;
            font-weight: bold;
            animation: pulse 1s infinite alternate;
        }
        
        .lose {
            color: #ff6666;
        }
        
        @keyframes pulse {
            from {
                transform: scale(1);
            }
            to {
                transform: scale(1.1);
            }
        }
        
        .scratched .scratch-cover {
            display: none;
        }
        
        .balance {
            font-size: 18px;
            margin-bottom: 15px;
            color: #ffd700;
        }
        
        .instructions {
            background-color: #333;
            border-radius: 5px;
            padding: 10px;
            margin-top: 20px;
            font-size: 14px;
            text-align: left;
            color: #ddd;
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Raspadinha Virtual</h1>
        
        <div class="balance">Saldo: $<span id="balance">100</span></div>
        
        <div class="game-board" id="gameBoard"></div>
        
        <div class="message" id="message"></div>
        
        <div class="controls">
            <button id="newGameBtn">Nova Raspadinha ($10)</button>
            <button id="scratchAllBtn">Raspar Todos</button>
        </div>
        
        <div class="instructions">
            <p><strong>Como jogar:</strong></p>
            <ul>
                <li>Cada raspadinha custa $10</li>
                <li>Clique nas áreas para raspar</li>
                <li>Combine 3 símbolos iguais para ganhar!</li>
                <li>Prêmios: 🍒 = $20 | 🍋 = $30 | 🔔 = $50 | 💎 = $100 | 🎰 = $200</li>
            </ul>
        </div>
    </div>

    <script>
        // Elementos DOM
        const gameBoard = document.getElementById('gameBoard');
        const message = document.getElementById('message');
        const newGameBtn = document.getElementById('newGameBtn');
        const scratchAllBtn = document.getElementById('scratchAllBtn');
        const balanceEl = document.getElementById('balance');
        
        // Variáveis do jogo
        let balance = 100;
        let symbols = ['🍒', '🍋', '🔔', '💎', '🎰'];
        let prizes = {
            '🍒': 20,
            '🍋': 30,
            '🔔': 50,
            '💎': 100,
            '🎰': 200
        };
        let currentBoard = [];
        let scratchedAreas = [];
        let gameActive = false;
        
        // Iniciar o jogo
        initGame();
        
        // Funções do jogo
        function initGame() {
            updateBalance(balance);
            newGameBtn.addEventListener('click', startNewGame);
            scratchAllBtn.addEventListener('click', scratchAll);
            scratchAllBtn.disabled = true;
        }
        
        function startNewGame() {
            if (balance < 10) {
                message.textContent = "Saldo insuficiente!";
                message.className = "message lose";
                return;
            }
            
            // Deduzir o custo da raspadinha
            updateBalance(balance - 10);
            
            // Limpar mensagem anterior
            message.textContent = "";
            message.className = "message";
            
            // Gerar um novo tabuleiro
            gameBoard.innerHTML = "";
            currentBoard = [];
            scratchedAreas = [];
            gameActive = true;
            scratchAllBtn.disabled = false;
            
            // Criar símbolos aleatórios (com maior chance de não ganhar)
            let boardSymbols = [];
            
            // Decidir se este jogo será vencedor (25% de chance)
            let isWinner = Math.random() < 0.25;
            
            if (isWinner) {
                // Escolher um símbolo aleatório para a combinação vencedora
                let winningSymbol = symbols[Math.floor(Math.random() * symbols.length)];
                
                // Colocar pelo menos 3 desse símbolo
                for (let i = 0; i < 3; i++) {
                    boardSymbols.push(winningSymbol);
                }
                
                // Preencher o resto com símbolos aleatórios diferentes
                for (let i = 0; i < 6; i++) {
                    let randomSymbol = symbols[Math.floor(Math.random() * symbols.length)];
                    // Tente evitar símbolos repetidos demais
                    while (countInArray(boardSymbols, randomSymbol) >= 3) {
                        randomSymbol = symbols[Math.floor(Math.random() * symbols.length)];
                    }
                    boardSymbols.push(randomSymbol);
                }
            } else {
                // Criar uma combinação não vencedora
                for (let i = 0; i < 9; i++) {
                    boardSymbols.push(symbols[Math.floor(Math.random() * symbols.length)]);
                }
                
                // Garantir que não há combinações vencedoras
                while (hasWinningCombination(boardSymbols)) {
                    let randomIndex = Math.floor(Math.random() * 9);
                    let randomSymbol = symbols[Math.floor(Math.random() * symbols.length)];
                    boardSymbols[randomIndex] = randomSymbol;
                }
            }
            
            // Embaralhar os símbolos
            boardSymbols = shuffleArray(boardSymbols);
            
            // Criar as áreas raspáveis
            for (let i = 0; i < 9; i++) {
                const symbol = boardSymbols[i];
                currentBoard.push(symbol);
                
                const scratchArea = document.createElement('div');
                scratchArea.className = 'scratch-area';
                scratchArea.dataset.index = i;
                
                const symbolElement = document.createElement('div');
                symbolElement.className = 'symbol';
                symbolElement.textContent = symbol;
                
                const scratchCover = document.createElement('div');
                scratchCover.className = 'scratch-cover';
                scratchCover.textContent = 'Raspe aqui!';
                
                scratchArea.appendChild(symbolElement);
                scratchArea.appendChild(scratchCover);
                
                scratchArea.addEventListener('click', () => scratchCard(scratchArea, i));
                
                gameBoard.appendChild(scratchArea);
            }
        }
        
        function scratchCard(scratchArea, index) {
            if (!gameActive) return;
            
            if (!scratchArea.classList.contains('scratched')) {
                scratchArea.classList.add('scratched');
                scratchedAreas.push(index);
                
                // Efeito de raspar
                const cover = scratchArea.querySelector('.scratch-cover');
                cover.style.transition = 'opacity 0.3s';
                cover.style.opacity = 0;
                
                setTimeout(() => {
                    cover.style.display = 'none';
                }, 300);
                
                // Verificar vitória após cada raspadinha
                checkWin();
            }
        }
        
        function scratchAll() {
            if (!gameActive) return;
            
            const scratchAreas = document.querySelectorAll('.scratch-area:not(.scratched)');
            
            scratchAreas.forEach((area, i) => {
                setTimeout(() => {
                    const index = parseInt(area.dataset.index);
                    scratchCard(area, index);
                }, i * 200);
            });
        }
        
        function checkWin() {
            // Verificar se já tem símbolos raspados suficientes para potencialmente vencer
            if (scratchedAreas.length < 3) return;
            
            // Coletar apenas os símbolos que foram raspados
            const scratchedSymbols = scratchedAreas.map(index => currentBoard[index]);
            
            // Contar ocorrências de cada símbolo raspado
            const symbolCounts = {};
            scratchedSymbols.forEach(symbol => {
                symbolCounts[symbol] = (symbolCounts[symbol] || 0) + 1;
            });
            
            let winningSymbol = null;
            
            // Verificar se algum símbolo aparece 3 vezes ou mais entre os símbolos raspados
            for (const symbol in symbolCounts) {
                if (symbolCounts[symbol] >= 3) {
                    winningSymbol = symbol;
                    break;
                }
            }
            
            // Se tiver raspado todas as áreas ou já tem uma combinação ganhadora
            if (scratchedAreas.length === 9 || winningSymbol) {
                gameActive = false;
                scratchAllBtn.disabled = true;
                
                if (winningSymbol) {
                    const prize = prizes[winningSymbol];
                    updateBalance(balance + prize);
                    message.textContent = `Parabéns! Você ganhou $${prize} com ${winningSymbol}`;
                    message.className = "message win";
                    
                    // Destacar os símbolos vencedores
                    scratchedAreas.forEach(index => {
                        if (currentBoard[index] === winningSymbol) {
                            const symbolEl = document.querySelectorAll('.scratch-area')[index].querySelector('.symbol');
                            symbolEl.style.animation = 'pulse 0.5s infinite alternate';
                            symbolEl.style.textShadow = '0 0 10px yellow';
                        }
                    });
                } else {
                    message.textContent = "Não foi dessa vez. Tente novamente!";
                    message.className = "message lose";
                }
                
                // Revelar todas as áreas não raspadas
                document.querySelectorAll('.scratch-area:not(.scratched)').forEach(area => {
                    setTimeout(() => {
                        const index = parseInt(area.dataset.index);
                        scratchCard(area, index);
                    }, 300);
                });
            }
        }
        
        function updateBalance(newBalance) {
            balance = newBalance;
            balanceEl.textContent = balance;
        }
        
        // Funções auxiliares
        function countInArray(array, item) {
            return array.filter(i => i === item).length;
        }
        
        function hasWinningCombination(board) {
            const symbolCounts = {};
            
            board.forEach(symbol => {
                symbolCounts[symbol] = (symbolCounts[symbol] || 0) + 1;
            });
            
            for (const symbol in symbolCounts) {
                if (symbolCounts[symbol] >= 3) {
                    return true;
                }
            }
            
            return false;
        }
        
        function shuffleArray(array) {
            for (let i = array.length - 1; i > 0; i--) {
                const j = Math.floor(Math.random() * (i + 1));
                [array[i], array[j]] = [array[j], array[i]];
            }
            return array;
        }
    </script>
</body>
</html>
